class DisjointIntervals:
    
    def __init__(self, nums: List[int]):


    def add(self, toBeAdded: List[int]) -> List[List[int]]:

    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        left , right = [], []
        for interval in intervals:
            if interval[1]< newInterval[0]:
                left.append(interval)
            elif interval[0] > newInterval[1]:
                right.append(interval)
            else:
                newInterval[0] = min(interval[0], newInterval[0])
                newInterval[1] = max(interval[1], newInterval[1])
        return left + [newInterval] + right


    def remove(self, toBeRemoved: List[int]) -> List[List[int]]:
        self.res = []
        for i in self.intervals:
            # no overlap
            if i[1] <= toBeRemoved[0] or i[0] >= toBeRemoved[1]: 
                res.append(i)
            # i starts first
            if i[0] < toBeRemoved[0]:
                res.append([i[0], toBeRemoved[0]])
            # i ends first
            if i[1] > toBeRemoved[1]:
                res.append([toBeRemoved[1],i[1]])
        self.intervals = res
        return self.intervals

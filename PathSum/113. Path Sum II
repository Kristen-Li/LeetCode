```python
class Solution:
    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:
        path = []
        res = []
        self.dfs(root,sum,path,res)
        return res

    def dfs(self, root: TreeNode, sum: int, path: List[int], res: List[List[int]]):
        if not root:
            return
        if not root.left and not root.right and sum == root.val:
            res.append(path + [root.val])
        self.dfs(root.left, sum-root.val, path + [root.val], res)        
        self.dfs(root.right, sum-root.val, path +[root.val], res)
```
复杂度分析

时间复杂度：O(N^2)，其中 N 是树的节点数。在最坏情况下，树的上半部分为链状，下半部分为完全二叉树，并且从根节点到每一个叶子节点的路径都符合题目要求。此时，路径的数目为 O(N)，并且每一条路径的节点个数也为 O(N)，因此要将这些路径全部添加进答案中，时间复杂度为 O(N^2)。

空间复杂度：O(N)，其中 N 是树的节点数。空间复杂度主要取决于栈空间的开销，栈中的元素个数不会超过树的节点数。

``` python
class Solution:
    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:
        if not root:
            return []
        queue = [(root,root.val,[root.val])]
        ans = []
        while queue:
            node, ps, path = queue.pop(0)
            if not node.left and not node.right and ps == sum:
                ans.append(path)
            size = len(queue)            
            if node.left:
                queue.append((node.left,ps+node.left.val, path+[node.left.val]))
            if node.right:
                queue.append((node.right,ps+node.right.val, path+[node.right.val]))
        return ans
```       
时间复杂度：O(N^2)

空间复杂度：O(N)，其中 N 是树的节点数。空间复杂度主要取决于哈希表和队列空间的开销，哈希表需要存储除根节点外的每个节点的父节点，队列中的元素个数不会超过树的节点数。
